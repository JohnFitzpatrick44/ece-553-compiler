%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS | BASE

%nonterm  program | decs | dec | vardec | fundec | tydec | ty | tyfields | tyfields_end | lvalue | exp | op | exps | exps_end | recdecs | recdecs_end | args | args_end

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc BASE
%nonassoc LBRACK ELSE
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE 
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program: exp		() 
		| decs 			()
    
decs: dec decs	()
		| 					()
    
dec: tydec			()
		| vardec		()
    | fundec		()
    
vardec: VAR ID ASSIGN exp					()
		| VAR ID COLON ID ASSIGN exp	()
    
fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp						()
		| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp		()
    
tydec: TYPE ID EQ ty 	()

ty: ID												()
		| LBRACE tyfields RBRACE	()
    | ARRAY OF ID							()
    
tyfields: ID COLON ID tyfields_end	()
		| 															()

tyfields_end: COMMA ID COLON ID tyfields_end	()
		|																					()
    
lvalue:  ID %prec BASE													()
			 | lvalue DOT ID							()
       | lvalue LBRACK exp RBRACK		()

exp:  INT					  											()
	  | STRING															()
    | NIL																	()    
    | MINUS exp %prec UMINUS							()
    | LPAREN exps RPAREN									()
    | ID LBRACK exp RBRACK OF exp %prec BASE					()
    | ID LBRACE recdecs RBRACE					()
    | lvalue															()
    | ID LPAREN args RPAREN								()
    | lvalue DOT ID LPAREN args RPAREN		()
    | lvalue ASSIGN exp %prec BASE										()
    | IF exp THEN exp %prec BASE ()
    | IF exp THEN exp ELSE exp %prec BASE ()
			     
    | WHILE exp DO exp %prec BASE								()
    | FOR ID ASSIGN exp TO exp DO exp %prec BASE			()
    | BREAK																()
    | LET decs IN exps END								()
    | exp PLUS exp												()
    | exp MINUS exp												()
    | exp TIMES exp												()
    | exp DIVIDE exp											()
    | exp EQ exp													()
    | exp NEQ exp													()
    | exp GT exp													()
    | exp LT exp													()
    | exp GE exp													()
    | exp LE exp													()
    | exp AND exp													()
    | exp OR exp 													()
  
exps: exp exps_end		()
		| 	()
    
exps_end: SEMICOLON exp exps_end		()
		|		()
    
recdecs: ID EQ exp recdecs_end 				()
			  | 										 			  ()
       
recdecs_end:  COMMA ID EQ exp recdecs_end ()
					  | 														()

args: 	exp args_end 		()
			|									()
    
args_end: 	COMMA exp args_end ()
    			| 									 ()
          

    
    
    

    
    
    
    
    
    
