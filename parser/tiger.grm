structure A = Absyn
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS | BASE

%nonterm  program of A.exp 
        | decs of A.dec list
        | dec of A.dec
        | vardec of A.dec
        | fundec of {name: A.symbol, params: {name: A.symbol, escape: bool ref, typ: A.symbol, pos: A.pos} list, result: (A.symbol * A.pos) option, body: A.exp, pos: A.pos} list
        | tydec of {name: A.symbol, ty: A.ty, pos: A.pos} list
        | ty of A.ty
        | tyfields of {name: A.symbol, escape: bool ref, typ: A.symbol, pos: A.pos} list
        | tyfields_end of {name: A.symbol, escape: bool ref, typ: A.symbol, pos: A.pos} list
        | lvalue of A.var
        | exp of A.exp
        | exps of (A.exp * A.pos) list 
        | exps_end of (A.exp * A.pos) list 
        | recdecs of (A.symbol * A.exp * A.pos) list
        | recdecs_end of (A.symbol * A.exp * A.pos) list
        | args of A.exp list
        | args_end of A.exp list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")


%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE 
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program: exp		(exp) 
    
decs: dec decs	(dec::decs)
		| 					([])
    
dec: tydec			(A.TypeDec(tydec))
		| vardec		(vardec)
    | fundec		(A.FunctionDec(fundec))
    
vardec: VAR ID ASSIGN exp					(A.VarDec({name=A.symbol ID, escape=(ref true), typ=NONE, init=exp, pos=VARleft}))
		| VAR ID COLON ID ASSIGN exp	(A.VarDec({name=A.symbol ID1, escape=(ref true), typ=SOME (A.symbol ID2, ID2left), init=exp, pos=VARleft}))
    
fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp	fundec					({name=A.symbol ID, params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft}::fundec)
		| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp fundec	  ({name=A.symbol ID1, params=tyfields, result=SOME (A.symbol ID2, ID2left), body=exp, pos=FUNCTIONleft}::fundec)
    |                                                             ([])

tydec: TYPE ID EQ ty tydec	  ({name=A.symbol ID, ty=ty, pos=TYPEleft}::tydec)
    |                         ([])

ty: ID												(A.NameTy(A.symbol ID, IDleft))
		| LBRACE tyfields RBRACE	(A.RecordTy(tyfields))
    | ARRAY OF ID							(A.ArrayTy(A.symbol ID, IDleft))

tyfields: ID COLON ID tyfields_end	({name=A.symbol ID1, escape=(ref true), typ=A.symbol ID2, pos=ID1left}::tyfields_end)
		| 															([])

tyfields_end: COMMA ID COLON ID tyfields_end	({name=A.symbol ID1, escape=(ref true), typ=A.symbol ID2, pos=ID1left}::tyfields_end)
		|																					([])
    
lvalue:  ID												(A.SimpleVar(A.symbol ID, IDleft))
		| lvalue DOT ID							  (A.FieldVar(lvalue, A.symbol ID, lvalueleft))
    | lvalue LBRACK exp RBRACK		(A.SubscriptVar(lvalue, exp, lvalueleft))

exp:  INT					  											(A.IntExp(INT))
	  | STRING															(A.StringExp(STRING, STRINGleft))
    | NIL																	(A.NilExp)    
    | MINUS exp %prec UMINUS							(A.OpExp({left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft}))
    | LPAREN exps RPAREN									(A.SeqExp(exps))
    | ID LBRACK exp RBRACK OF exp					(A.ArrayExp({typ=A.symbol ID, size=exp1, init=exp2, pos=IDleft}))
    | ID LBRACE recdecs RBRACE					  (A.RecordExp({fields=recdecs, typ=A.symbol ID, pos=IDleft}))
    | lvalue															(A.VarExp(lvalue))
    | ID LPAREN args RPAREN						    (A.CallExp({func=A.symbol ID, args=args, pos=lvalueleft}))    (*  TODO: Fix func, takes symbol, not var  *)
    | lvalue ASSIGN exp										(A.AssignExp({var=lvalue, exp=exp, pos=lvalueleft}))
    | IF exp THEN exp                     (A.IfExp({test=exp1, then'=exp2, else'=NONE, pos=IFleft}))
    | IF exp THEN exp ELSE exp            (A.IfExp({test=exp1, then'=exp2, else'=SOME exp3, pos=IFleft}))
    | WHILE exp DO exp    								(A.WhileExp({test=exp1, body=exp2, pos=WHILEleft}))
    | FOR ID ASSIGN exp TO exp DO exp 		(A.ForExp({var=A.symbol ID, escape=(ref true), lo=exp1, hi=exp2, body=exp3, pos=FORleft}))
    | BREAK																(A.BreakExp(BREAKleft))
    | LET decs IN exps END								(A.LetExp({decs=decs, body=exps, pos=LETleft}))
    | exp PLUS exp												(A.OpExp({left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left}))
    | exp MINUS exp												(A.OpExp({left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left}))
    | exp TIMES exp												(A.OpExp({left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left}))
    | exp DIVIDE exp											(A.OpExp({left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left}))
    | exp EQ exp													(A.OpExp({left=exp1, oper=A.EqOp, right=exp2, pos=exp1left}))
    | exp NEQ exp													(A.OpExp({left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left}))
    | exp GT exp													(A.OpExp({left=exp1, oper=A.GtOp, right=exp2, pos=exp1left}))
    | exp LT exp													(A.OpExp({left=exp1, oper=A.LtOp, right=exp2, pos=exp1left}))
    | exp GE exp													(A.OpExp({left=exp1, oper=A.GeOp, right=exp2, pos=exp1left}))
    | exp LE exp													(A.OpExp({left=exp1, oper=A.LeOp, right=exp2, pos=exp1left}))
    | exp AND exp													(A.IfExp({test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left}))
    | exp OR exp 													(A.IfExp({test=exp1, then'=A.IntExp(1), else'=SOME exp2, pos=exp1left}))
  
exps: exp exps_end		((exp, expleft)::exps_end)
		| 	              ([])
    
exps_end: SEMICOLON exp exps_end		((exp, expleft)::exps_end)
		|		                            ([])
    
recdecs: ID EQ exp recdecs_end 				((A.symbol ID, exp, IDleft)::recdecs_end)
		| 										 			      ([])
       
recdecs_end:  COMMA ID EQ exp recdecs_end   ((A.symbol ID, exp, IDleft)::recdecs_end)
		| 														          ([])

args: 	exp args_end 		(exp::args_end)
		|									  ([])
    
args_end: 	COMMA exp args_end   (exp::args_end)
    | 									         ([])
          

    
    
    

    
    
    
    
    
    

